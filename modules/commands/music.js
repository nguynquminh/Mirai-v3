const axios = require("axios");
const fs = require("fs");
const { exec } = require("child_process");
const { performance } = require("perf_hooks");

const CLIENT_ID = "e7627efa9d404f42927ca1e51cf845df";
const CLIENT_SECRET = "02d2967645df412ebeb2943519f5e9bb";
const YOUTUBE_API_KEY = "AIzaSyB7xzteIRvqCBURoCWP5Ui14haTnte55jU";

async function getSpotifyToken() {
    const authBuffer = Buffer.from(`${CLIENT_ID}:${CLIENT_SECRET}`).toString("base64");
    try {
        const response = await axios.post("https://accounts.spotify.com/api/token", 
            "grant_type=client_credentials",
            { headers: { Authorization: `Basic ${authBuffer}`, "Content-Type": "application/x-www-form-urlencoded" } }
        );
        return response.data.access_token;
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y Spotify Token:", error.response?.data || error);
        return null;
    }
}

const checkCommand = (cmd) => new Promise((resolve) => {
    exec(`where ${cmd}`, (err, stdout) => resolve(!err && stdout.trim().length > 0));
});

module.exports.config = {
    name: "music",
    version: "1.1.0",
    hasPermssion: 0,
    credits: "B·∫°n",
    description: "T√¨m ki·∫øm v√† ph√°t nh·∫°c t·ª´ Spotify v√† YouTube",
    commandCategory: "Gi·∫£i tr√≠",
    usages: "music [t√™n b√†i h√°t]",
    cooldowns: 5
};

module.exports.run = async function({ api, event, args }) {
    if (!args.length) {
        return api.sendMessage("üì¢ Vui l√≤ng nh·∫≠p t√™n b√†i h√°t c·∫ßn t√¨m!", event.threadID);
    }

    const query = args.join(" ");
    api.sendMessage(`üîç ƒêang t√¨m b√†i h√°t: ${query}`, event.threadID);

    const startTime = performance.now();
    try {
        const token = await getSpotifyToken();
        if (!token) return api.sendMessage("‚ùå Kh√¥ng th·ªÉ l·∫•y token Spotify!", event.threadID);

        const spotifyRes = await axios.get(`https://api.spotify.com/v1/search`, {
            headers: { "Authorization": `Bearer ${token}` },
            params: { q: query, type: "track", limit: 1 }
        });

        if (!spotifyRes.data.tracks.items.length) {
            return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t tr√™n Spotify!", event.threadID);
        }

        const song = spotifyRes.data.tracks.items[0];
        const songInfo = {
            title: song.name.replace(/[<>:"\/\\|?*]+/g, "_"),
            artist: song.artists.map(a => a.name).join(", "),
            cover: song.album.images[0]?.url || null,
            youtubeSearch: `${song.name} ${song.artists[0].name}`
        };

        let message = `üé∂ **B√†i h√°t**: ${songInfo.title}\nüë§ **Ngh·ªá sƒ©**: ${songInfo.artist}\nüíø **Album**: ${song.album.name}\n‚û°Ô∏è Reply \"play\" ƒë·ªÉ ph√°t nh·∫°c.`;

        const msgData = { body: message };
        if (songInfo.cover) {
            const imgStream = (await axios({ url: songInfo.cover, responseType: "stream" })).data;
            msgData.attachment = imgStream;
        }

        api.sendMessage(msgData, event.threadID, (err, info) => {
            global.client.handleReply.push({
                name: module.exports.config.name,
                messageID: info.messageID,
                author: event.senderID,
                songInfo
            });
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi t√¨m ki·∫øm b√†i h√°t:", error);
        api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm b√†i h√°t!", event.threadID);
    }
    console.log(`‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω t√¨m ki·∫øm: ${(performance.now() - startTime).toFixed(2)}ms`);
};

module.exports.handleReply = async function({ api, event, handleReply }) {
    if (event.body.toLowerCase() !== "play") return;
    if (event.senderID !== handleReply.author) return;

    const ytDlpExists = await checkCommand("yt-dlp");
    const ffmpegExists = await checkCommand("ffmpeg");

    if (!ytDlpExists || !ffmpegExists) {
        return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y yt-dlp ho·∫∑c ffmpeg! Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t.", event.threadID);
    }

    api.sendMessage("‚è≥ ƒêang t·∫£i nh·∫°c, vui l√≤ng ch·ªù...", event.threadID);
    const songInfo = handleReply.songInfo;
    const startTime = performance.now();
    try {
        const ytSearch = await axios.get(`https://www.googleapis.com/youtube/v3/search`, {
            params: {
                part: "snippet",
                q: songInfo.youtubeSearch,
                key: YOUTUBE_API_KEY,
                maxResults: 1,
                type: "video"
            }
        }).catch(error => {
            console.error("‚ùå L·ªói API YouTube:", error);
            return null;
        });

        if (!ytSearch || !ytSearch.data.items.length) {
            return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y video YouTube ph√π h·ª£p!", event.threadID);
        }

        const youtubeURL = `https://www.youtube.com/watch?v=${ytSearch.data.items[0].id.videoId}`;
        const filePath = `C:/Users/quang/Desktop/Mirai-Bot-V3/modules/commands/cache/${songInfo.title}.mp3`;

        exec(`yt-dlp -f bestaudio "${youtubeURL}" -o "${filePath}.webm" && ffmpeg -i "${filePath}.webm" -q:a 0 -map a "${filePath}"`, async (err) => {
            if (err) {
                console.error("‚ùå L·ªói khi t·∫£i nh·∫°c:", err);
                return api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi t·∫£i nh·∫°c!", event.threadID);
            }

            api.sendMessage({
                body: `üé∂ **Ph√°t nh·∫°c**: ${songInfo.title} - ${songInfo.artist}`,
                attachment: fs.createReadStream(filePath)
            }, event.threadID, () => {
                fs.unlinkSync(`${filePath}.webm`);
                fs.unlinkSync(filePath);
            });
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i nh·∫°c:", error);
        return api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi t·∫£i nh·∫°c!", event.threadID);
    }
    console.log(`‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω t·∫£i nh·∫°c: ${(performance.now() - startTime).toFixed(2)}ms`);
};
