module.exports.config = {
    name: "system",
    version: "1.0.1",
    hasPermssion: 0,
    credits: "qm (UI n√¢ng c·∫•p b·ªüi GPT)",
    description: "Xem th√¥ng tin ph·∫ßn c·ª©ng m√† bot ƒëang s·ª≠ d·ª•ng",
    commandCategory: "Th√¥ng tin",
    cooldowns: 5,
    dependencies: {
        "systeminformation": ""
    }
};

const si = require("systeminformation");

function byte2mb(bytes) {
    const units = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    let i = 0,
        n = parseInt(bytes, 10) || 0;
    while (n >= 1024 && ++i) n /= 1024;
    return `${n.toFixed(i ? 1 : 0)} ${units[i]}`;
}

module.exports.run = async function({
    api,
    event
}) {
    const timeStart = Date.now();

    try {
        const cpuInfo = await si.cpu();
        const tempInfo = await si.cpuTemperature();
        const loadInfo = await si.currentLoad();
        const diskInfo = await si.diskLayout();
        const memInfo = await si.memLayout();
        const memStats = await si.mem();
        const osStats = await si.osInfo();

        const uptime = process.uptime();
        const hours = String(Math.floor(uptime / 3600)).padStart(2, '0');
        const minutes = String(Math.floor((uptime % 3600) / 60)).padStart(2, '0');
        const seconds = String(Math.floor(uptime % 60)).padStart(2, '0');

        const msg = `
üîß=== [ SYSTEM INFORMATION ] ===üîß

üñ•Ô∏è CPU:
‚Ä¢ Model      : ${cpuInfo.manufacturer} ${cpuInfo.brand}
‚Ä¢ Speed      : ${cpuInfo.speed} GHz
‚Ä¢ Cores      : ${cpuInfo.physicalCores} Cores / ${cpuInfo.cores} Threads
‚Ä¢ Temp       : ${tempInfo.main || "N/A"}¬∞C
‚Ä¢ Load       : ${loadInfo.currentLoad.toFixed(1)}%

üíæ MEMORY:
‚Ä¢ Total RAM  : ${byte2mb(memStats.total)}
‚Ä¢ Available  : ${byte2mb(memStats.available)}
‚Ä¢ RAM Type   : ${memInfo[0]?.type || "Unknown"}
‚Ä¢ Slot Size  : ${byte2mb(memInfo[0]?.size || 0)}

üóÇÔ∏è DISK:
‚Ä¢ Name       : ${diskInfo[0]?.name || "Unknown"}
‚Ä¢ Size       : ${byte2mb(diskInfo[0]?.size || 0)}
‚Ä¢ Temp       : ${diskInfo[0]?.temperature || "N/A"}¬∞C

üß∞ OS:
‚Ä¢ Platform   : ${osStats.platform}
‚Ä¢ Build      : ${osStats.build}
‚Ä¢ Uptime     : ${hours}:${minutes}:${seconds}

üì° Ping: ${Date.now() - timeStart}ms
`.trim();

        return api.sendMessage(msg, event.threadID, event.messageID);

    } catch (err) {
        console.error("‚ùå L·ªói l·∫•y th√¥ng tin h·ªá th·ªëng:", err);
        return api.sendMessage("‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin h·ªá th·ªëng!", event.threadID, event.messageID);
    }
};
