module.exports.config = {
    name: "weather",
    version: "1.2.0",
    hasPermssion: 0,
    credits: "qm",
    description: "Xem th·ªùi ti·∫øt trong 5 ng√†y",
    commandCategory: "C√¥ng C·ª•",
    usages: "[ƒë·ªãa ƒëi·ªÉm]",
    cooldowns: 10,
    dependencies: {
        "axios": "",
        "moment-timezone": "",
        "canvas": "",
        "fs-extra": ""
    }
};

module.exports.run = async function({
    api,
    event,
    args
}) {
    try {
        const axios = require("axios");
        const moment = require("moment-timezone");
        const {
            createCanvas,
            loadImage,
            registerFont
        } = require("canvas");
        const fs = require("fs-extra");
        const path = require("path");

        const apikey = "d7e795ae6a0d44aaa8abb1a0a7ac19e4";
        const area = args.join(" ");

        if (!area) return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm c·∫ßn xem th·ªùi ti·∫øt!", event.threadID, event.messageID);

        // T·∫£i font v√† background
        const assets = {
            bg: {
                url: "https://i.imgur.com/1Rx88Te.jpg",
                path: path.join(__dirname, 'cache', 'bgweather.jpg')
            },
            font: {
                url: "https://github.com/JetBrains/JetBrainsMono/raw/master/fonts/ttf/JetBrainsMono-Bold.ttf",
                path: path.join(__dirname, 'cache', 'JetBrainsMono-Bold.ttf')
            }
        };

        await Promise.all(Object.values(assets).map(async asset => {
            if (!fs.existsSync(asset.path)) {
                const data = (await axios.get(asset.url, {
                    responseType: "arraybuffer"
                })).data;
                fs.writeFileSync(asset.path, Buffer.from(data));
            }
        }));

        // L·∫•y th√¥ng tin ƒë·ªãa ƒëi·ªÉm
        const locationResponse = await axios.get(`https://api.accuweather.com/locations/v1/cities/search.json?q=${encodeURIComponent(area)}&apikey=${apikey}&language=vi-vn`);
        if (locationResponse.data.length === 0) {
            return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm n√†y!", event.threadID, event.messageID);
        }

        const locationData = locationResponse.data[0];
        const areaKey = locationData.Key;

        // L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt
        const weatherResponse = await axios.get(`http://api.accuweather.com/forecasts/v1/daily/5day/${areaKey}?apikey=${apikey}&details=true&language=vi`);
        const weatherData = weatherResponse.data;

        // H√†m chuy·ªÉn ƒë·ªïi
        const convertFtoC = (F) => Math.floor((F - 32) / 1.8);
        const formatTime = (time) => moment(time).tz("Asia/Ho_Chi_Minh").format("HH[h]mm[p]");

        // T·∫°o th√¥ng b√°o
        const today = weatherData.DailyForecasts[0];
        let msg = `üå§Ô∏è Th·ªùi ti·∫øt t·∫°i ${area}\n` +
            `üìå ${weatherData.Headline.Text}\n\n` +
            `üå° Nhi·ªát ƒë·ªô: ${convertFtoC(today.Temperature.Minimum.Value)}¬∞C - ${convertFtoC(today.Temperature.Maximum.Value)}¬∞C\n` +
            `üå° C·∫£m nh·∫≠n: ${convertFtoC(today.RealFeelTemperature.Minimum.Value)}¬∞C - ${convertFtoC(today.RealFeelTemperature.Maximum.Value)}¬∞C\n` +
            `üåÖ M·∫∑t tr·ªùi: ${formatTime(today.Sun.Rise)} - ${formatTime(today.Sun.Set)}\n` +
            `üåô M·∫∑t trƒÉng: ${formatTime(today.Moon.Rise)} - ${formatTime(today.Moon.Set)}\n` +
            `‚òÄÔ∏è Ban ng√†y: ${today.Day.LongPhrase}\n` +
            `üåô Ban ƒë√™m: ${today.Night.LongPhrase}\n` +
            `üåßÔ∏è L∆∞·ª£ng m∆∞a: ${today.Day.RainProbability}%`;

        // T·∫°o h√¨nh ·∫£nh d·ª± b√°o
        registerFont(assets.font.path, {
            family: "JetBrainsMono"
        });
        const bg = await loadImage(assets.bg.path);
        const canvas = createCanvas(bg.width, bg.height);
        const ctx = canvas.getContext('2d');
        ctx.drawImage(bg, 0, 0, canvas.width, canvas.height);

        let xPos = 100;
        const forecastDays = weatherData.DailyForecasts.slice(0, 5);

        // S·ª≠ d·ª•ng bi·ªÉu t∆∞·ª£ng m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c SVG
        const defaultIcon = await loadImage('https://i.imgur.com/7W2YJpL.png'); // ·∫¢nh m·∫∑c ƒë·ªãnh

        for (const day of forecastDays) {
            try {
                const iconUrl = `https://developer.accuweather.com/sites/default/files/${String(day.Day.Icon).padStart(2, '0')}-s.png`;
                let icon;

                try {
                    const iconRes = await axios.get(iconUrl, {
                        responseType: "arraybuffer"
                    });
                    icon = await loadImage(Buffer.from(iconRes.data));
                } catch {
                    icon = defaultIcon; // S·ª≠ d·ª•ng ·∫£nh m·∫∑c ƒë·ªãnh n·∫øu l·ªói
                }

                ctx.drawImage(icon, xPos, 210, 80, 80);

                ctx.fillStyle = "#ffffff";
                ctx.font = "22px JetBrainsMono";

                // Nhi·ªát ƒë·ªô cao nh·∫•t
                ctx.fillText(`${convertFtoC(day.Temperature.Maximum.Value)}¬∞C`, xPos, 366);

                // Nhi·ªát ƒë·ªô th·∫•p nh·∫•t
                ctx.fillText(`${convertFtoC(day.Temperature.Minimum.Value)}¬∞C`, xPos, 445);

                // Ng√†y
                const date = moment(day.Date).format("DD/MM");
                ctx.fillText(date, xPos, 140);

                xPos += 135;
            } catch (e) {
                console.error("Error drawing day:", e);
                continue;
            }
        }

        // L∆∞u v√† g·ª≠i ·∫£nh
        const outputPath = path.join(__dirname, 'cache', 'weather_result.jpg');
        const out = fs.createWriteStream(outputPath);
        const stream = canvas.createJPEGStream({
            quality: 0.95
        });
        stream.pipe(out);

        await new Promise((resolve, reject) => {
            out.on('finish', resolve);
            out.on('error', reject);
        });

        return api.sendMessage({
            body: msg,
            attachment: fs.createReadStream(outputPath)
        }, event.threadID, () => fs.unlinkSync(outputPath), event.messageID);

    } catch (error) {
        console.error("Weather Command Error:", error);
        return api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau!", event.threadID, event.messageID);
    }
};
