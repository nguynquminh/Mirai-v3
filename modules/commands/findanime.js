module.exports.config = {
    name: "findanime",
    version: "1.1.0",
    hasPermssion: 0,
    credits: "qm ",
    description: "T√¨m anime t·ª´ h√¨nh ·∫£nh s·ª≠ d·ª•ng trace.moe API",
    commandCategory: "ti·ªán √≠ch",
    usages: "[reply ·∫£nh/url ·∫£nh]",
    cooldowns: 10,
    dependencies: {
        "axios": "",
        "fs-extra": ""
    }
};

module.exports.run = async function ({ api, event }) {
    const axios = require('axios');
    const fs = require('fs-extra');
    const path = __dirname + '/cache';

    try {
        if (event.type !== "message_reply" || !event.messageReply.attachments || event.messageReply.attachments.length === 0) {
            return api.sendMessage('Vui l√≤ng reply m·ªôt ·∫£nh ƒë·ªÉ t√¨m anime!', event.threadID, event.messageID);
        }

        const attachment = event.messageReply.attachments[0];
        let imageUrl;

        if (attachment.type === "photo") {
            imageUrl = attachment.url;
        } else {
            return api.sendMessage('Ch·ªâ h·ªó tr·ª£ t√¨m ki·∫øm v·ªõi ·∫£nh tƒ©nh!', event.threadID, event.messageID);
        }

        api.sendMessage('üîÑ ƒêang t√¨m ki·∫øm th√¥ng tin anime...', event.threadID, event.messageID);

        const { data } = await axios.get(`https://api.trace.moe/search?url=${encodeURIComponent(imageUrl)}`);

        if (!data.result || data.result.length === 0) {
            return api.sendMessage('Kh√¥ng t√¨m th·∫•y anime ph√π h·ª£p v·ªõi h√¨nh ·∫£nh n√†y!', event.threadID);
        }

        const formatTime = (seconds) => {
            const date = new Date(seconds * 1000);
            return date.toISOString().substr(11, 8);
        };

        const resultsToShow = data.result.slice(0, 5); // Gi·ªõi h·∫°n t·ªëi ƒëa 5 k·∫øt qu·∫£

        for (let i = 0; i < resultsToShow.length; i++) {
            const result = resultsToShow[i];
            const {
                filename,
                episode,
                similarity,
                from,
                to,
                video
            } = result;

            const message = `üå∏ K·∫øt qu·∫£ #${i + 1}:\n\n` +
                `üì∫ T√™n: ${filename}\n` +
                `üìñ T·∫≠p: ${episode || 'Kh√¥ng r√µ'}\n` +
                `üìä ƒê·ªô ch√≠nh x√°c: ${(similarity * 100).toFixed(2)}%\n` +
                `‚è± Th·ªùi gian: ${formatTime(from)} - ${formatTime(to)}\n`;

            // N·∫øu c√≥ video preview th√¨ t·∫£i v·ªÅ v√† g·ª≠i k√®m
            if (video) {
                const videoPath = `${path}/trace_${i}.mp4`;
                const videoStream = await axios.get(video, { responseType: 'stream' });
                const writer = fs.createWriteStream(videoPath);
                videoStream.data.pipe(writer);
                await new Promise((resolve, reject) => {
                    writer.on('finish', resolve);
                    writer.on('error', reject);
                });

                await api.sendMessage({
                    body: message,
                    attachment: fs.createReadStream(videoPath)
                }, event.threadID);

                fs.unlinkSync(videoPath);
            } else {
                await api.sendMessage(message, event.threadID);
            }
        }

    } catch (error) {
        console.error(error);
        api.sendMessage('‚ùå C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm anime!', event.threadID);
    }
};
