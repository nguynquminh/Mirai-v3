module.exports.config = {
    name: "dragonball",
    version: "6.0.0",
    hasPermssion: 0,
    credits: "qm",
    description: "Xem th√¥ng tin nh√¢n v·∫≠t Dragon Ball v·ªõi h√¨nh ·∫£nh v√† ch·ªâ s·ªë bi·∫øn h√¨nh",
    commandCategory: "Gi·∫£i tr√≠",
    usages: "[list/info/search] [t√™n/id]",
    cooldowns: 5,
    dependencies: {
        "axios": "",
        "fs-extra": "",
        "path": ""
    }
};

const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');

// C·∫•u h√¨nh th∆∞ m·ª•c cache
const CACHE_DIR = path.join(__dirname, 'cache', 'dragonball');
if (!fs.existsSync(CACHE_DIR)) {
    fs.mkdirSync(CACHE_DIR, { recursive: true });
}

// H√†m t·∫£i ·∫£nh v·ªõi retry v√† timeout
async function downloadImage(url, filename) {
    const filePath = path.join(CACHE_DIR, `${filename}.jpg`);
    
    for (let retry = 0; retry < 3; retry++) {
        try {
            const response = await axios({
                method: 'GET',
                url: url,
                responseType: 'stream',
                timeout: 15000
            });

            const writer = fs.createWriteStream(filePath);
            response.data.pipe(writer);

            return new Promise((resolve, reject) => {
                writer.on('finish', () => resolve(filePath));
                writer.on('error', reject);
            });
        } catch (err) {
            if (retry === 2) throw err;
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
    }
}

// H√†m hi·ªÉn th·ªã danh s√°ch nh√¢n v·∫≠t
async function showCharacterList(api, threadID, messageID) {
    try {
        const response = await axios.get('https://dragonball-api.com/api/characters?limit=70');
        const characters = response.data.items;
        
        let message = 'üìã DANH S√ÅCH NH√ÇN V·∫¨T DRAGON BALL üìã\n\n';
        characters.forEach((char, index) => {
            message += `${index + 1}. ${char.name} (ID: ${char.id})\n`;
        });
        
        message += `\nS·ª≠ d·ª•ng l·ªánh: ${global.config.PREFIX}dragonball info [ID] ƒë·ªÉ xem chi ti·∫øt`;
        
        api.sendMessage(message, threadID, messageID);
    } catch (error) {
        console.error(error);
        api.sendMessage('‚ùå L·ªói khi t·∫£i danh s√°ch nh√¢n v·∫≠t!', threadID, messageID);
    }
}

// H√†m g·ª≠i th√¥ng tin bi·∫øn h√¨nh chi ti·∫øt
async function sendTransformations(api, threadID, charName, transformations) {
    try {
        // G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu
        await api.sendMessage(`üåÄ B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã ${transformations.length} bi·∫øn h√¨nh c·ªßa ${charName}...`, threadID);

        // G·ª≠i t·ª´ng ·∫£nh v·ªõi th√¥ng tin chi ti·∫øt
        for (const [index, trans] of transformations.entries()) {
            try {
                const imagePath = await downloadImage(trans.image, `trans_${index}_${Date.now()}`);
                
                await api.sendMessage({
                    body: `‚ú® ${charName} - ${trans.name}\nüí• S·ª©c m·∫°nh: ${trans.ki}\nüÜî ID bi·∫øn h√¨nh: ${trans.id}\nüìä Th·ª© t·ª±: ${index + 1}/${transformations.length}`,
                    attachment: fs.createReadStream(imagePath)
                }, threadID);
                
                fs.unlinkSync(imagePath);
                await new Promise(resolve => setTimeout(resolve, 1200));
                
            } catch (e) {
                console.error(`L·ªói khi g·ª≠i bi·∫øn h√¨nh ${index + 1}:`, e);
                await api.sendMessage(`‚ùå Kh√¥ng th·ªÉ t·∫£i bi·∫øn h√¨nh ${transformations[index].name}`, threadID);
            }
        }

        // G·ª≠i t·ªïng k·∫øt
        await api.sendMessage(
            `‚úÖ ƒê√£ hi·ªÉn th·ªã t·∫•t c·∫£ ${transformations.length} bi·∫øn h√¨nh c·ªßa ${charName}`,
            threadID
        );

    } catch (error) {
        console.error('L·ªói khi g·ª≠i bi·∫øn h√¨nh:', error);
        await api.sendMessage('‚ùå ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã bi·∫øn h√¨nh!', threadID);
    }
}

// H√†m hi·ªÉn th·ªã th√¥ng tin nh√¢n v·∫≠t
async function showCharacterInfo(api, threadID, messageID, charId) {
    try {
        const response = await axios.get(`https://dragonball-api.com/api/characters/${charId}`);
        const char = response.data;
        
        let message = `‚ö° TH√îNG TIN NH√ÇN V·∫¨T: ${char.name} ‚ö°\n\n`;
        message += `üÜî ID: ${char.id}\n`;
        message += `üë§ Gi·ªõi t√≠nh: ${char.gender}\n`;
        message += `üß¨ Ch·ªßng t·ªôc: ${char.race}\n`;
        message += `üí• S·ª©c m·∫°nh: ${char.ki}\n`;
        message += `üí´ S·ª©c m·∫°nh t·ªëi ƒëa: ${char.maxKi}\n`;
        message += `üè∑Ô∏è Phe ph√°i: ${char.affiliation}\n\n`;
        
        if (char.transformations?.length > 0) {
            message += `‚ú® C√≥ ${char.transformations.length} d·∫°ng bi·∫øn h√¨nh\n`;
        }
        
        message += `üìù M√¥ t·∫£:\n${char.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}`;
        
        // G·ª≠i ·∫£nh nh√¢n v·∫≠t ch√≠nh
        try {
            const charImagePath = await downloadImage(char.image, `char_${char.id}_${Date.now()}`);
            await api.sendMessage({
                body: message,
                attachment: fs.createReadStream(charImagePath)
            }, threadID);
            fs.unlinkSync(charImagePath);
            
            // G·ª≠i bi·∫øn h√¨nh n·∫øu c√≥
            if (char.transformations?.length > 0) {
                await sendTransformations(api, threadID, char.name, char.transformations);
            }
        } catch (e) {
            console.error('L·ªói khi x·ª≠ l√Ω ·∫£nh:', e);
            await api.sendMessage(message, threadID);
            await api.sendMessage('‚ùå Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh nh√¢n v·∫≠t', threadID);
        }
        
    } catch (error) {
        console.error(error);
        api.sendMessage('‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n v·∫≠t ho·∫∑c ƒë√£ x·∫£y ra l·ªói!', threadID, messageID);
    }
}

// H√†m t√¨m ki·∫øm nh√¢n v·∫≠t
async function searchCharacter(api, threadID, messageID, query) {
    try {
        const response = await axios.get('https://dragonball-api.com/api/characters?limit=100');
        const characters = response.data.items.filter(char => 
            char.name.toLowerCase().includes(query.toLowerCase())
        );
        
        if (characters.length === 0) {
            return api.sendMessage('‚ùå Kh√¥ng t√¨m th·∫•y nh√¢n v·∫≠t ph√π h·ª£p!', threadID, messageID);
        }
        
        let message = `üîç K·∫æT QU·∫¢ T√åM KI·∫æM CHO "${query}" üîç\n\n`;
        characters.slice(0, 10).forEach(char => {
            message += `‚Üí ${char.name} (ID: ${char.id})\n`;
        });
        
        if (characters.length > 10) {
            message += `\n‚ö†Ô∏è Hi·ªÉn th·ªã 10/${characters.length} k·∫øt qu·∫£. Vui l√≤ng t√¨m ki·∫øm c·ª• th·ªÉ h∆°n.`;
        }
        
        message += `\nS·ª≠ d·ª•ng l·ªánh: ${global.config.PREFIX}dragonball info [ID] ƒë·ªÉ xem chi ti·∫øt`;
        
        api.sendMessage(message, threadID, messageID);
    } catch (error) {
        console.error(error);
        api.sendMessage('‚ùå L·ªói khi t√¨m ki·∫øm nh√¢n v·∫≠t!', threadID, messageID);
    }
}

module.exports.run = async function({ api, event, args }) {
    const { threadID, messageID } = event;
    
    try {
        if (!args[0]) {
            const menuMessage = `‚ö° DRAGON BALL CHARACTER MENU ‚ö°\n\n`
                + `C√°c l·ªánh s·ª≠ d·ª•ng:\n`
                + `‚Üí ${global.config.PREFIX}dragonball list - Xem danh s√°ch nh√¢n v·∫≠t\n`
                + `‚Üí ${global.config.PREFIX}dragonball info [ID] - Xem th√¥ng tin nh√¢n v·∫≠t\n`
                + `‚Üí ${global.config.PREFIX}dragonball search [t√™n] - T√¨m ki·∫øm nh√¢n v·∫≠t\n\n`
                + `V√≠ d·ª•:\n`
                + `${global.config.PREFIX}dragonball info 1\n`
                + `${global.config.PREFIX}dragonball search Goku`;
            
            return api.sendMessage(menuMessage, threadID, messageID);
        }

        const action = args[0].toLowerCase();
        
        if (action === 'list') {
            await showCharacterList(api, threadID, messageID);
        } 
        else if (action === 'info') {
            if (!args[1]) {
                return api.sendMessage('‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID nh√¢n v·∫≠t!', threadID, messageID);
            }
            await showCharacterInfo(api, threadID, messageID, args[1]);
        }
        else if (action === 'search' || action === 't√¨m') {
            if (!args[1]) {
                return api.sendMessage('‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n nh√¢n v·∫≠t c·∫ßn t√¨m!', threadID, messageID);
            }
            await searchCharacter(api, threadID, messageID, args.slice(1).join(' '));
        }
        else {
            api.sendMessage('‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá! Vui l√≤ng xem menu h∆∞·ªõng d·∫´n.', threadID, messageID);
        }
    } catch (error) {
        console.error(error);
        api.sendMessage('‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh!', threadID, messageID);
    }
};