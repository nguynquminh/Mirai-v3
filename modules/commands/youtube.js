const { exec } = require("child_process");
const fs = require("fs");
const path = require("path");
const axios = require("axios");

const YOUTUBE_API_KEY = "AIzaSyB7xzteIRvqCBURoCWP5Ui14haTnte55jU";
const YOUTUBE_SEARCH_URL = "https://www.googleapis.com/youtube/v3/search";
const CACHE_DIR = path.join("C:", "Users", "quang", "Desktop", "Mirai-Bot-V3", "modules", "commands", "cache");

if (!fs.existsSync(CACHE_DIR)) {
    fs.mkdirSync(CACHE_DIR, { recursive: true });
}

module.exports.config = {
    name: "youtube",
    version: "1.4.0",
    hasPermssion: 0,
    credits: "qm",
    description: "T√¨m ki·∫øm v√† t·∫£i video t·ª´ YouTube s·ª≠ d·ª•ng API YouTube v3 ho·∫∑c tr·ª±c ti·∫øp t·ª´ link",
    commandCategory: "Ti·ªán √≠ch",
    usages: "youtube [t·ª´ kh√≥a] ho·∫∑c youtube +[link]",
    cooldowns: 10
};

module.exports.handleReply = async function({ api, event, handleReply }) {
    try {
        const { body, messageID, threadID } = event;
        const selectedIndex = Number(body);
        
        if (isNaN(selectedIndex) || selectedIndex < 1 || selectedIndex > handleReply.results.length) {
            return api.sendMessage("‚ùå Vui l√≤ng ch·ªçn m·ªôt s·ªë h·ª£p l·ªá trong danh s√°ch!", threadID, messageID);
        }

        const videoData = handleReply.results[selectedIndex - 1];
        if (!videoData) {
            return api.sendMessage("‚ö†Ô∏è K·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!", threadID);
        }

        const videoUrl = `https://www.youtube.com/watch?v=${videoData.id}`;
        await downloadAndSendVideo(api, videoUrl, threadID);
        
    } catch (error) {
        console.error("‚ùå L·ªói trong handleReply:", error);
        api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i!", event.threadID);
    }
};

async function downloadAndSendVideo(api, videoUrl, threadID) {
    try {
        const fileName = `video_${Date.now()}.mp4`;
        const filePath = path.join(CACHE_DIR, fileName);

        console.log(`üõ†Ô∏è B·∫Øt ƒë·∫ßu t·∫£i video t·ª´: ${videoUrl}`);
        api.sendMessage("‚è≥ ƒêang t·∫£i video, vui l√≤ng ch·ªù...", threadID);
        
        exec(`yt-dlp -f best -o "${filePath}" "${videoUrl}"`, (error) => {
            if (error) {
                console.error("‚ùå L·ªói khi t·∫£i video:", error);
                return api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi t·∫£i video, vui l√≤ng th·ª≠ l·∫°i!", threadID);
            }

            console.log(`‚úÖ T·∫£i xong video: ${filePath}`);
            api.sendMessage({
                body: "‚úÖ T·∫£i xong video!",
                attachment: fs.createReadStream(filePath)
            }, threadID, () => {
                fs.unlinkSync(filePath);
                console.log(`üóëÔ∏è ƒê√£ x√≥a t·ªáp: ${filePath}`);
            });
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i video t·ª´ link:", error);
        api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi t·∫£i video, vui l√≤ng th·ª≠ l·∫°i!", threadID);
    }
}

function isValidYouTubeUrl(url) {
    const pattern = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/;
    return pattern.test(url);
}

module.exports.run = async function({ api, event, args }) {
    if (args.length === 0) {
        return api.sendMessage("üì¢ Vui l√≤ng nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm video YouTube ho·∫∑c link YouTube ƒë·ªÉ t·∫£i tr·ª±c ti·∫øp!", event.threadID);
    }

    // Ki·ªÉm tra n·∫øu l√† link YouTube
    if (args[0].startsWith("+") && isValidYouTubeUrl(args[0].substring(1))) {
        const videoUrl = args[0].substring(1);
        console.log(`üîó Nh·∫≠n y√™u c·∫ßu t·∫£i video t·ª´ link: ${videoUrl}`);
        return await downloadAndSendVideo(api, videoUrl, event.threadID);
    }
    // Ki·ªÉm tra n·∫øu l√† link YouTube kh√¥ng c√≥ d·∫•u +
    else if (isValidYouTubeUrl(args[0])) {
        return api.sendMessage("‚ÑπÔ∏è ƒê·ªÉ t·∫£i video t·ª´ link, vui l√≤ng th√™m d·∫•u '+' tr∆∞·ªõc link. V√≠ d·ª•: !youtube +https://www.youtube.com/watch?v=...", event.threadID);
    }

    // N·∫øu kh√¥ng ph·∫£i link th√¨ th·ª±c hi·ªán t√¨m ki·∫øm
    const query = args.join(" ");
    console.log(`üîç T√¨m ki·∫øm video v·ªõi t·ª´ kh√≥a: ${query}`);
    try {
        const response = await axios.get(YOUTUBE_SEARCH_URL, {
            params: {
                key: YOUTUBE_API_KEY,
                q: query,
                part: "snippet",
                maxResults: 5,
                type: "video"
            }
        });
        
        const results = response.data.items.map(video => ({
            id: video.id.videoId,
            title: video.snippet.title,
            description: video.snippet.description,
            thumbnail: video.snippet.thumbnails.high.url,
            channelTitle: video.snippet.channelTitle,
            publishedAt: new Date(video.snippet.publishedAt).toLocaleString()
        }));

        console.log("üìÑ Danh s√°ch video t√¨m ƒë∆∞·ª£c:", results.map(v => v.title));
        
        const attachments = await Promise.all(results.map(async (video, index) => {
            try {
                const imageResponse = await axios({
                    url: video.thumbnail,
                    responseType: "arraybuffer"
                });
                const imagePath = path.join(CACHE_DIR, `thumb_${index}.jpg`);
                fs.writeFileSync(imagePath, Buffer.from(imageResponse.data, "binary"));
                return fs.createReadStream(imagePath);
            } catch {
                return null;
            }
        }));

        const message = results.map((video, index) => 
            `${index + 1}. ${video.title}\nüîπ K√™nh: ${video.channelTitle}\nüìÖ Ng√†y ƒëƒÉng: ${video.publishedAt}\nüîó https://www.youtube.com/watch?v=${video.id}\nüìñ ${video.description.substring(0, 150)}...`
        ).join("\n\n");
        
        return api.sendMessage({
            body: message + "\n\nüí¨ H√£y reply s·ªë th·ª© t·ª± ƒë·ªÉ t·∫£i video!",
            attachment: attachments.filter(a => a)
        }, event.threadID, (err, info) => {
            if (!err) {
                console.log(`üì© Tin nh·∫Øn k·∫øt qu·∫£ t√¨m ki·∫øm ID: ${info.messageID}`);
                global.client.handleReply.push({
                    name: module.exports.config.name,
                    messageID: info.messageID,
                    author: event.senderID,
                    results
                });
            }
            attachments.forEach((file, index) => {
                if (file) fs.unlinkSync(path.join(CACHE_DIR, `thumb_${index}.jpg`));
            });
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi t√¨m ki·∫øm tr√™n YouTube API:", error);
        return api.sendMessage("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm, vui l√≤ng th·ª≠ l·∫°i!", event.threadID);
    }
};