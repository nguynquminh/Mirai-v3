const fs = require("fs-extra");
const moment = require("moment-timezone");
const axios = require("axios");

module.exports.config = {
    name: "config",
    version: "1.0.3",
    hasPermssion: 2,
    credits: "Thi·ªáu Trung Ki√™n",
    description: "Command Prompt",
    commandCategory: "H·ªá th·ªëng admin-bot",
    cooldowns: 5,
    dependencies: {
        axios: ""
    }
};

module.exports.languages = {
    vi: {
        returnResult: "ƒê√¢y l√† k·∫øt qu·∫£ ph√π h·ª£p: \n",
        returnNull: "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ d·ª±a v√†o t√¨m ki·∫øm c·ªßa b·∫°n!"
    },
    en: {
        returnResult: "This is your result: \n",
        returnNull: "There is no result with your input!"
    }
};

module.exports.handleEvent = async function({
    api,
    event
}) {
    const moment = require("moment-timezone");
    const currentTime = moment.tz("Asia/Ho_Chi_Minh").format("HH:mm:ss");
    const seconds = moment.tz("Asia/Ho_Chi_Minh").format("ss");
    const adminList = global.config.ADMINBOT;

    if (currentTime === `12:00:${seconds}` && seconds < 6) {
        for (const adminID of adminList) {
            setTimeout(() => {
                api.sendMessage(
                    `„ÄâB√¢y gi·ªù l√†: ${currentTime}\n[‚ùó] Bot s·∫Ω ti·∫øn h√†nh kh·ªüi ƒë·ªông l·∫°i !`,
                    adminID,
                    () => process.exit(1)
                );
            }, 1000);
        }
    }
};

module.exports.run = async function({
    api,
    event,
    args
}) {
    if (!args[0]) {
        const message =
            "üõ† | ƒê√¢y l√† to√†n b·ªô c√†i ƒë·∫∑t c·ªßa bot | üõ†\n" +
            "=== Qu·∫£n L√Ω C√†i ƒê·∫∑t ===\n" +
            "[1] Prefix.\n" +
            "[2] T√™n bot.\n" +
            "[3] Danh s√°ch Admin.\n" +
            "[4] Ng√¥n ng·ªØ.\n" +
            "[5] T·ª± kh·ªüi ƒë·ªông l·∫°i.\n" +
            "=== Qu·∫£n L√Ω Ho·∫°t ƒê·ªông ===\n" +
            "[6] Ki·ªÉm tra c·∫≠p nh·∫≠t.\n" +
            "[7] L·∫•y danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m.\n" +
            "[8] L·∫•y danh s√°ch nh√≥m b·ªã c·∫•m.\n" +
            "[9] G·ª≠i th√¥ng b√°o t·ªõi t·∫•t c·∫£ c√°c nh√≥m.\n" +
            "[10]. T√¨m ki·∫øm UID th√¥ng qua t√™n ng∆∞·ªùi d√πng.\n" +
            "[11]. T√¨m ki·∫øm TID box qua t√™n box\n" +
            "[12]. ƒê·ªïi emoji box\n" +
            "[13]. ƒê·ªïi t√™n box\n" +
            "[14]. Xem info box\n" +
            "-> ƒê·ªÉ ch·ªçn, h√£y reply tin nh·∫Øn n√†y v·ªõi s·ªë <-";

        return api.sendMessage(message, event.threadID, (err, info) => {
            global.client.handleReply.push({
                name: module.exports.config.name,
                messageID: info.messageID,
                author: event.senderID,
                type: "choose"
            });
        }, event.messageID);
    }
};

module.exports.handleReply = async function({
    api,
    event,
    handleReply,
    Currencies,
    Users,
    Threads
}) {
    const {
        threadID,
        messageID,
        senderID,
        body
    } = event;

    // Ki·ªÉm tra ng∆∞·ªùi tr·∫£ l·ªùi c√≥ ph·∫£i l√† ng∆∞·ªùi ƒë√£ g·ªçi l·ªánh kh√¥ng
    if (senderID !== handleReply.author) return;

    const userInput = body.trim();

    switch (handleReply.type) {
        case "choose": {
            switch (userInput) {
                case "1": {
                    const currentPrefix = global.config.PREFIX;
                    return api.sendMessage(`üìå Prefix hi·ªán t·∫°i c·ªßa bot l√†: ${currentPrefix}`, threadID, messageID);
                }

                case "2": {
                    const botName = global.config.BOTNAME;
                    return api.sendMessage(`ü§ñ T√™n bot hi·ªán t·∫°i l√†: ${botName}`, threadID, messageID);
                }

                case "3": {
                    const adminList = global.config.ADMINBOT || [];
                    let msg = "üìã Danh s√°ch Admin c·ªßa bot:\n";
                    for (let i = 0; i < adminList.length; i++) {
                        const userName = await Users.getNameUser(adminList[i]);
                        msg += `${i + 1}. ${userName} (UID: ${adminList[i]})\n`;
                    }
                    return api.sendMessage(msg, threadID, messageID);
                }

                case "4": {
                    const language = global.config.LANGUAGE === "vi" ? "Ti·∫øng Vi·ªát" : "English";
                    return api.sendMessage(`üåê Ng√¥n ng·ªØ hi·ªán t·∫°i c·ªßa bot l√†: ${language}`, threadID, messageID);
                }

                case "5": {
                    return api.sendMessage(
                        `üîÅ Ch·ª©c nƒÉng n√†y gi√∫p bot t·ª± kh·ªüi ƒë·ªông l·∫°i v√†o ƒë√∫ng 12:00 m·ªói ng√†y.\n‚è± Hi·ªán tr·∫°ng: ƒê√£ ƒë∆∞·ª£c b·∫≠t m·∫∑c ƒë·ªãnh.`,
                        threadID,
                        messageID
                    );
                }

                case "6": {
                    return api.sendMessage(`üîç ƒêang ki·ªÉm tra c·∫≠p nh·∫≠t...`, threadID, async (err, info) => {
                        try {
                            const response = await axios.get("https://raw.githubusercontent.com/thuetruongkien/config/main/package.json");
                            const latestVersion = response.data.version;
                            const currentVersion = require("./../../package.json").version;

                            if (latestVersion > currentVersion) {
                                return api.sendMessage(`‚ö†Ô∏è Bot c√≥ b·∫£n c·∫≠p nh·∫≠t m·ªõi: ${latestVersion}\nüîß Phi√™n b·∫£n hi·ªán t·∫°i: ${currentVersion}`, threadID);
                            } else {
                                return api.sendMessage(`‚úÖ Bot ƒëang s·ª≠ d·ª•ng phi√™n b·∫£n m·ªõi nh·∫•t (${currentVersion})`, threadID);
                            }
                        } catch (error) {
                            return api.sendMessage(`‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra c·∫≠p nh·∫≠t: ${error.message}`, threadID);
                        }
                    });
                }

                case "7": {
                    const bannedUsers = global.data.userBanned || new Map();
                    if (bannedUsers.size === 0) return api.sendMessage("‚úÖ Hi·ªán t·∫°i kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o b·ªã c·∫•m.", threadID, messageID);

                    let msg = "üö´ Danh s√°ch ng∆∞·ªùi d√πng b·ªã c·∫•m:\n";
                    let index = 1;
                    for (const [userID, reason] of bannedUsers) {
                        const name = await Users.getNameUser(userID);
                        msg += `${index++}. ${name} (UID: ${userID}) - L√Ω do: ${reason.reason || "Kh√¥ng r√µ"}\n`;
                    }
                    return api.sendMessage(msg, threadID, messageID);
                }

                case "8": {
                    const bannedThreads = global.data.threadBanned || new Map();
                    if (bannedThreads.size === 0) return api.sendMessage("‚úÖ Hi·ªán t·∫°i kh√¥ng c√≥ nh√≥m n√†o b·ªã c·∫•m.", threadID, messageID);

                    let msg = "üö´ Danh s√°ch nh√≥m b·ªã c·∫•m:\n";
                    let index = 1;
                    for (const [threadID, info] of bannedThreads) {
                        const name = info.name || "Kh√¥ng r√µ t√™n";
                        msg += `${index++}. ${name} (TID: ${threadID}) - L√Ω do: ${info.reason || "Kh√¥ng r√µ"}\n`;
                    }
                    return api.sendMessage(msg, threadID, messageID);
                }

                case "9": {
                    return api.sendMessage("‚úâÔ∏è Vui l√≤ng reply tin nh·∫Øn n√†y v·ªõi n·ªôi dung b·∫°n mu·ªën g·ª≠i ƒë·∫øn t·∫•t c·∫£ nh√≥m.", threadID, (error, info) => {
                        global.client.handleReply.push({
                            name: module.exports.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            type: "broadcast"
                        });
                    }, messageID);
                }

                case "10": {
                    return api.sendMessage("üîç Nh·∫≠p t√™n ng∆∞·ªùi d√πng ƒë·ªÉ t√¨m UID.", threadID, (error, info) => {
                        global.client.handleReply.push({
                            name: module.exports.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            type: "getuid"
                        });
                    }, messageID);
                }

                case "11": {
                    return api.sendMessage("üîç Nh·∫≠p t√™n nh√≥m ƒë·ªÉ t√¨m TID.", threadID, (error, info) => {
                        global.client.handleReply.push({
                            name: module.exports.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            type: "gettidbox"
                        });
                    }, messageID);
                }

                case "12": {
                    return api.sendMessage("üñº Nh·∫≠p emoji b·∫°n mu·ªën ƒë·ªïi cho box n√†y.", threadID, (error, info) => {
                        global.client.handleReply.push({
                            name: module.exports.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            type: "emojibox"
                        });
                    }, messageID);
                }

                case "13": {
                    return api.sendMessage("üìù Nh·∫≠p t√™n m·ªõi cho box n√†y.", threadID, (error, info) => {
                        global.client.handleReply.push({
                            name: module.exports.config.name,
                            messageID: info.messageID,
                            author: senderID,
                            type: "namebox"
                        });
                    }, messageID);
                }

                case "14": {
                    try {
                        const threadInfo = await Threads.getInfo(threadID);
                        const threadName = threadInfo.threadName || "Kh√¥ng x√°c ƒë·ªãnh";
                        const threadEmoji = threadInfo.emoji || "Kh√¥ng c√≥";
                        const threadAdmins = threadInfo.adminIDs.map(i => i.id);

                        let adminNames = [];
                        for (const adminID of threadAdmins) {
                            const name = await Users.getNameUser(adminID);
                            adminNames.push(`‚Ä¢ ${name} (UID: ${adminID})`);
                        }

                        return api.sendMessage(
                            `üì¶ Th√¥ng tin c·ªßa box:\nüë• T√™n: ${threadName}\nüÜî TID: ${threadID}\nüòÑ Emoji: ${threadEmoji}\nüëë Admins:\n${adminNames.join("\n")}`,
                            threadID,
                            messageID
                        );
                    } catch (e) {
                        return api.sendMessage(`‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin box: ${e.message}`, threadID, messageID);
                    }
                }

                default:
                    return api.sendMessage("‚ö†Ô∏è S·ªë b·∫°n nh·∫≠p kh√¥ng h·ª£p l·ªá!", threadID, messageID);
            }
        }

        case "broadcast": {
            const threadList = [...global.data.allThreadID];
            for (const tid of threadList) {
                api.sendMessage(`üì¢ Th√¥ng b√°o t·ª´ Admin:\n\n${body}`, tid);
            }
            return api.sendMessage("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ nh√≥m.", threadID, messageID);
        }

        case "getuid": {
            try {
                const name = body.toLowerCase();
                let found = [];
                for (const [uid, userData] of global.data.allUserName) {
                    if (userData.toLowerCase().includes(name)) {
                        found.push(`${userData} - UID: ${uid}`);
                    }
                }
                if (found.length === 0) return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y UID n√†o ph√π h·ª£p.", threadID, messageID);
                return api.sendMessage(`üîé K·∫øt qu·∫£:\n${found.join("\n")}`, threadID, messageID);
            } catch (err) {
                return api.sendMessage(`‚ùå L·ªói khi t√¨m UID: ${err.message}`, threadID, messageID);
            }
        }

        case "gettidbox": {
            try {
                const name = body.toLowerCase();
                let found = [];
                for (const [tid, threadData] of global.data.allThreadName) {
                    if (threadData.toLowerCase().includes(name)) {
                        found.push(`${threadData} - TID: ${tid}`);
                    }
                }
                if (found.length === 0) return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y TID n√†o ph√π h·ª£p.", threadID, messageID);
                return api.sendMessage(`üîé K·∫øt qu·∫£:\n${found.join("\n")}`, threadID, messageID);
            } catch (err) {
                return api.sendMessage(`‚ùå L·ªói khi t√¨m TID: ${err.message}`, threadID, messageID);
            }
        }

        case "emojibox": {
            try {
                await api.changeThreadEmoji(body, threadID);
                return api.sendMessage(`‚úÖ ƒê√£ ƒë·ªïi emoji box th√†nh: ${body}`, threadID, messageID);
            } catch (e) {
                return api.sendMessage(`‚ùå Kh√¥ng th·ªÉ ƒë·ªïi emoji: ${e.message}`, threadID, messageID);
            }
        }

        case "namebox": {
            try {
                await api.setTitle(body, threadID);
                return api.sendMessage(`‚úÖ ƒê√£ ƒë·ªïi t√™n box th√†nh: ${body}`, threadID, messageID);
            } catch (e) {
                return api.sendMessage(`‚ùå Kh√¥ng th·ªÉ ƒë·ªïi t√™n box: ${e.message}`, threadID, messageID);
            }
        }

        default:
            return;
    }
};
